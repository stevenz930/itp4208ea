{% extends "base.html" %}
{% load course_extras %}

{% block title %}Explore{% endblock %}

{% block content %}

{% load course_extras %}

    {% include 'include/course_listMob.html' %}
    
        
    

   <!-- Subject Tabs -->
<div class="subject-tabs-container">
    <div class="container">
        <ul class="nav subject-tabs">
            <li class="nav-item">
                <a class="nav-link {% if not current_subject %}active{% endif %}" 
                   href="?subject=all">All</a>
            </li>
            {% for subject in subjects %}
            <li class="nav-item">
                <a class="nav-link {% if current_subject == subject.slug %}active{% endif %}" 
                   href="?subject={{ subject.slug }}">{{ subject.name }}</a>
            </li>
            {% endfor %}
        </ul>
    </div>
</div>

    <!-- Main Content -->
<div class="container my-5">
    <div class="row">
            <!-- Desktop Filter Sidebar  -->
            <div class="col-lg-3 mb-4 d-none d-lg-block">
                <form method="get" id="desktopFilterForm">
                    <div class="filter-sidebar">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="mb-0">Filters</h5>
                        </div>
                        
                        <div class="accordion" id="filterAccordion">
                            <!-- Categories Filter -->
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#desktopCategoriesCollapse">
                                        Categories
                                    </button>
                                </h2>
                                <div id="desktopCategoriesCollapse" class="accordion-collapse collapse show" data-bs-parent="#filterAccordion">
                                    <div class="accordion-body">
                                        <div class="filter-categories">
                                            {% for category in filtered_categories %}
                                            <div class="form-check mb-2">
                                                <input class="form-check-input" type="checkbox" name="category" 
                                                    id="desktop-category-{{ category.id }}" value="{{ category.id }}"
                                                    {% if category.id|stringformat:"s" in request.GET.getlist %}checked{% endif %}>
                                                <label class="form-check-label" for="desktop-category-{{ category.id }}">{{ category.name }}</label>
                                            </div>
                                            {% empty %}
                                            <div class="text-muted">No categories available for this subject</div>
                                            {% endfor %}
                                        </div>
                                    </div>
                                </div>
                            </div>
            
                            <!-- Level Filter -->
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#desktopLevelCollapse">
                                        Level
                                    </button>
                                </h2>
                                <div id="desktopLevelCollapse" class="accordion-collapse collapse show" data-bs-parent="#filterAccordion">
                                    <div class="accordion-body">
                                        {% for level in level_choices %}
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" name="level" 
                                                id="desktop-level-{{ level.0 }}" value="{{ level.0 }}"
                                                {% if level.0 in request.GET.getlist|stringformat:"s" %}checked{% endif %}>
                                            <label class="form-check-label" for="desktop-level-{{ level.0 }}">{{ level.1 }}</label>
                                        </div>
                                        {% endfor %}
                                    </div>
                                </div>
                            </div>
            
                            <!-- Price Filter -->
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#desktopPriceCollapse">
                                        Price Range
                                    </button>
                                </h2>
                                <div id="desktopPriceCollapse" class="accordion-collapse collapse show" data-bs-parent="#filterAccordion">
                                    <div class="accordion-body">
                                        <div class="price-range-container">
                                            <div class="price-label mb-2">Select Price Range</div>
                                            <div class="price-slider">
                                                <div class="price-progress" id="desktopPriceProgress"></div>
                                                <input type="range" 
                                                    class="price-range" 
                                                    min="{{ price_range.min_price|default:0|floatformat:0 }}" 
                                                    max="{{ price_range.max_price|default:100|floatformat:0 }}" 
                                                    step="1" 
                                                    value="{{ request.GET.max_price|default:price_range.max_price|default:100|floatformat:0 }}"
                                                    id="desktopPriceSlider">
                                            </div>
                                            <div class="price-display mt-2">
                                                <span class="price-value">${{ request.GET.min_price|default:price_range.min_price|default:0|floatformat:0 }}</span>
                                                <span class="price-value" id="desktopMaxPriceDisplay">
                                                    ${{ request.GET.max_price|default:price_range.max_price|default:100|floatformat:0 }}
                                                </span>
                                            </div>
                                            <input type="hidden" name="min_price" id="desktopMinPriceInput" value="{{ request.GET.min_price|default:price_range.min_price|default:0|floatformat:0 }}">
                                            <input type="hidden" name="max_price" id="desktopMaxPriceInput" value="{{ request.GET.max_price|default:price_range.max_price|default:100|floatformat:0 }}">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <button type="submit" style="display: none;"></button>
                    </div>
                </form>
            </div>

     
            
            <!-- Course List -->
            <div class="col-lg-9">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h4>All Courses</h4>
                    <div class="dropdown">
                        <button class="btn btn-outline-primary dropdown-toggle" type="button" id="sortDropdown" data-bs-toggle="dropdown">
                            Sort by: 
                            {% if current_sort == 'popular' %}Most Popular
                            {% elif current_sort == 'highest' %}Highest Rated
                            {% elif current_sort == 'newest' %}Newest
                            {% elif current_sort == 'price_low' %}Price Low to High
                            {% elif current_sort == 'price_high' %}Price High to Low
                            {% else %}Most Popular{% endif %}
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="?{% preserve_filters request 'sort' 'popular' %}">Most Popular</a></li>
                            <li><a class="dropdown-item" href="?{% preserve_filters request 'sort' 'highest' %}">Highest Rated</a></li>
                            <li><a class="dropdown-item" href="?{% preserve_filters request 'sort' 'newest' %}">Newest</a></li>
                            <li><a class="dropdown-item" href="?{% preserve_filters request 'sort' 'price_low' %}">Price Low to High</a></li>
                            <li><a class="dropdown-item" href="?{% preserve_filters request 'sort' 'price_high' %}">Price High to Low</a></li>
                        </ul>
                    </div>
                </div>
                
                <div class="row">
                    {% for course in courses %}
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card course-card h-100" onclick="window.location.href='{% url 'course_detail' course.id %}';" style="cursor: pointer;">
                            <div class="course-card-img-container">
                                <img src="{{ course.thumbnail.url }}" class="course-card-img" alt="{{ course.title }}">
                            </div>
                            <div class="course-card-body">
                                <h5 class="course-title">{{ course.title }}</h5>
                                <p class="course-instructor">{{ course.instructor.get_full_name }}</p>
                                <div class="course-rating">
                                    <span class="rating-stars">
                                        {% for star_class in course.average_rating|show_stars %}
                                            <i class="{{ star_class }}"></i>
                                        {% endfor %}
                                    </span>
                                    <span>{{ course.average_rating|floatformat:1 }} ({{ course.rating_count|default:0 }})</span>
                                </div>
                                <div class="course-price d-flex justify-content-between align-items-center">
                                    <div>
                                        {% if course.is_free %}
                                            <span class="badge bg-warning text-dark">FREE</span>
                                        {% else %}
                                            <span class="current-price">${{ course.price }}</span>
                                            {% if course.discount_price %}
                                            <span class="original-price">${{ course.discount_price }}</span>
                                            {% endif %}
                                        {% endif %}
                                    </div>
                                    {% if course.is_new %}
                                    <span class="badge bg-warning text-dark">New</span>
                                    {% elif course.is_bestseller %}
                                    <span class="badge bg-success">Bestseller</span>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                    </div>
                    {% empty %}
                    <div class="col-12">
                        <div class="alert alert-info">No courses found matching your criteria.</div>
                    </div>
                    {% endfor %}
                </div>
                
                <!-- Pagination -->
                {% if courses.paginator.num_pages > 1 %}
                <nav class="mt-5">
                    <ul class="pagination justify-content-center">
                        {% if courses.has_previous %}
                        <li class="page-item">
                            <a class="page-link" href="?{% preserve_filters request 'page' courses.previous_page_number %}">Previous</a>
                        </li>
                        {% else %}
                        <li class="page-item disabled">
                            <span class="page-link">Previous</span>
                        </li>
                        {% endif %}
                        
                        {% for num in courses.paginator.page_range %}
                            {% if num == courses.number %}
                            <li class="page-item active">
                                <span class="page-link">{{ num }}</span>
                            </li>
                            {% else %}
                            <li class="page-item">
                                <a class="page-link" href="?{% preserve_filters request 'page' num %}">{{ num }}</a>
                            </li>
                            {% endif %}
                        {% endfor %}
                        
                        {% if courses.has_next %}
                        <li class="page-item">
                            <a class="page-link" href="?{% preserve_filters request 'page' courses.next_page_number %}">Next</a>
                        </li>
                        {% else %}
                        <li class="page-item disabled">
                            <span class="page-link">Next</span>
                        </li>
                        {% endif %}
                    </ul>
                </nav>
                {% endif %}
            </div>
        </div>
    </div>

    {% block extra_js %}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Mobile filter sidebar elements
            const mobileFilterBtn = document.getElementById('mobileFilterBtn');
            const filterSidebar = document.getElementById('filterSidebar');
            const filterOverlay = document.getElementById('filterOverlay');
            const closeFilterSidebar = document.getElementById('closeFilterSidebar');
        
            // Mobile filter sidebar toggle
            function closeMobileFilters() {
                filterSidebar?.classList.remove('show');
                if (filterOverlay) {
                    filterOverlay.style.display = 'none';
                }
                document.body.style.overflow = 'auto';
            }
        
            if (mobileFilterBtn && filterSidebar && filterOverlay) {
                mobileFilterBtn.addEventListener('click', function() {
                    filterSidebar.classList.add('show');
                    filterOverlay.style.display = 'block';
                    document.body.style.overflow = 'hidden';
                });
        
                closeFilterSidebar?.addEventListener('click', closeMobileFilters);
                filterOverlay.addEventListener('click', closeMobileFilters);
            }
        
            // Handle filter changes (including price range)
            function updateFilters() {
                const urlParams = new URLSearchParams(window.location.search);
                
                // Update price range parameters
                const desktopMinPrice = document.getElementById('desktopMinPriceInput')?.value;
                const desktopMaxPrice = document.getElementById('desktopMaxPriceInput')?.value;
                const mobileMinPrice = document.getElementById('minPriceInput')?.value;
                const mobileMaxPrice = document.getElementById('maxPriceInput')?.value;
                
                if (desktopMinPrice && desktopMaxPrice) {
                    urlParams.set('min_price', desktopMinPrice);
                    urlParams.set('max_price', desktopMaxPrice);
                } else if (mobileMinPrice && mobileMaxPrice) {
                    urlParams.set('min_price', mobileMinPrice);
                    urlParams.set('max_price', mobileMaxPrice);
                }
                
                // Reset to first page when filters change
                urlParams.set('page', '1');
                
                // Close mobile filters if needed
                if (window.innerWidth < 992) {
                    closeMobileFilters();
                }
                
                // Update URL and reload
                window.location.search = urlParams.toString();
            }
        
            // Handle checkbox changes
            document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
                checkbox.addEventListener('change', updateFilters);
            });
        
            // Initialize price sliders with new behavior
            function initializeSlider(slider, maxDisplay, maxInput, minInput = null) {
                if (slider) {
                    const maxValue = slider.max;
                    const currentValue = slider.value;
                    
                    // Update progress display (if exists)
                    const progress = slider.parentElement.querySelector('.price-progress');
                    if (progress) {
                        progress.style.width = `${(currentValue / maxValue) * 100}%`;
                    }
                    
                    slider.addEventListener('input', function() {
                        const value = this.value;
                        const max = this.max;
                        
                        // Update progress display (if exists)
                        if (progress) {
                            progress.style.width = `${(value / max) * 100}%`;
                        }
                        
                        // Update display values
                        if (maxDisplay) {
                            maxDisplay.textContent = `$${value}`;
                        }
                        if (maxInput) {
                            maxInput.value = value;
                        }
                    });
                    
                    // Change to use our updateFilters function instead of direct form submit
                    slider.addEventListener('change', updateFilters);
                }
            }
        
            // Initialize both sliders
            initializeSlider(
                document.getElementById('priceSlider'),
                document.getElementById('maxPriceDisplay'),
                document.getElementById('maxPriceInput'),
                document.getElementById('minPriceInput')
            );
        
            initializeSlider(
                document.getElementById('desktopPriceSlider'),
                document.getElementById('desktopMaxPriceDisplay'),
                document.getElementById('desktopMaxPriceInput'),
                document.getElementById('desktopMinPriceInput')
            );
        
            // Initialize checkbox states from URL
            function updateCheckboxStates() {
                const urlParams = new URLSearchParams(window.location.search);
        
                document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
                    const paramName = checkbox.name;
                    const paramValue = checkbox.value;
        
                    checkbox.checked = urlParams.getAll(paramName).includes(paramValue);
                });
            }
            updateCheckboxStates();
        });
        </script>
    {% endblock %}
{% endblock %}